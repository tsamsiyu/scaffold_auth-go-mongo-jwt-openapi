// Code generated by mockery v2.14.0. DO NOT EDIT.

package auth

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockTokenStore is an autogenerated mock type for the TokenStore type
type MockTokenStore struct {
	mock.Mock
}

type MockTokenStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenStore) EXPECT() *MockTokenStore_Expecter {
	return &MockTokenStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, token, expiration
func (_m *MockTokenStore) Create(ctx context.Context, token *Token, expiration time.Duration) error {
	ret := _m.Called(ctx, token, expiration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Token, time.Duration) error); ok {
		r0 = rf(ctx, token, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockTokenStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - token *Token
//  - expiration time.Duration
func (_e *MockTokenStore_Expecter) Create(ctx interface{}, token interface{}, expiration interface{}) *MockTokenStore_Create_Call {
	return &MockTokenStore_Create_Call{Call: _e.mock.On("Push", ctx, token, expiration)}
}

func (_c *MockTokenStore_Create_Call) Run(run func(ctx context.Context, token *Token, expiration time.Duration)) *MockTokenStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Token), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockTokenStore_Create_Call) Return(_a0 error) *MockTokenStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteByHash provides a mock function with given fields: ctx, hash
func (_m *MockTokenStore) DeleteByHash(ctx context.Context, hash string) error {
	ret := _m.Called(ctx, hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenStore_DeleteByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByHash'
type MockTokenStore_DeleteByHash_Call struct {
	*mock.Call
}

// DeleteByHash is a helper method to define mock.On call
//  - ctx context.Context
//  - hash string
func (_e *MockTokenStore_Expecter) DeleteByHash(ctx interface{}, hash interface{}) *MockTokenStore_DeleteByHash_Call {
	return &MockTokenStore_DeleteByHash_Call{Call: _e.mock.On("DeleteByHash", ctx, hash)}
}

func (_c *MockTokenStore_DeleteByHash_Call) Run(run func(ctx context.Context, hash string)) *MockTokenStore_DeleteByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenStore_DeleteByHash_Call) Return(_a0 error) *MockTokenStore_DeleteByHash_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindByHash provides a mock function with given fields: ctx, hash
func (_m *MockTokenStore) FindByHash(ctx context.Context, hash string) (*Token, error) {
	ret := _m.Called(ctx, hash)

	var r0 *Token
	if rf, ok := ret.Get(0).(func(context.Context, string) *Token); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenStore_FindByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindForUpdate'
type MockTokenStore_FindByHash_Call struct {
	*mock.Call
}

// FindByHash is a helper method to define mock.On call
//  - ctx context.Context
//  - hash string
func (_e *MockTokenStore_Expecter) FindByHash(ctx interface{}, hash interface{}) *MockTokenStore_FindByHash_Call {
	return &MockTokenStore_FindByHash_Call{Call: _e.mock.On("FindForUpdate", ctx, hash)}
}

func (_c *MockTokenStore_FindByHash_Call) Run(run func(ctx context.Context, hash string)) *MockTokenStore_FindByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenStore_FindByHash_Call) Return(_a0 *Token, _a1 error) *MockTokenStore_FindByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockTokenStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTokenStore creates a new instance of MockTokenStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTokenStore(t mockConstructorTestingTNewMockTokenStore) *MockTokenStore {
	mock := &MockTokenStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
